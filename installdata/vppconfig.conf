
unix {
    ## Enable interactive mode if you wish to send commands via terminal
    # interactive
    nodaemon
    log /var/log/vpp/vpp.log
    full-coredump
    cli-listen /run/vpp/cli.sock
    gid vpp
}

api-trace {
    # VPP recommendes to leave this on
    on
}

api-segment {
    # Just leave it like this
    gid vpp
}

socksvr {
    # The UNIX socket used to manage VPP binary API, default=/run/vpp-api.sock
    default
}

cpu {
    ## Cores up to N-1 will never be used, threads will spawn on subsequent cores
    # TODO: I will manually specify on which cores VPP can run
    #skip-cores 0
    ## Number of worker threads spawned
    # TODO: For now we use it in single-threaded mode
    workers 1

    ## To place threads manually
    ## Where main thread will run
    main-core 0

    ## List of cores where workers will run (if workers are enabled)
    corelist-workers 2

    ## SCHEDULER OPTIONS
    ## Scheduling policy options are: other (SCHED_OTHER), batch (SCHED_BATCH)
    ## idle (SCHED_IDLE), fifo (SCHED_FIFO), rr (SCHED_RR)
    # scheduler-policy fifo

    ## Scheduling priority is used only for "real-time policies (fifo and rr),
    ## and has to be in the range of priorities supported for a particular policy
    # scheduler-priority 50
}

## TODO:
# buffers {
    ## Increase number of buffers allocated, needed only in scenarios with
    ## large number of interfaces and worker threads. Value is per numa node.
    ## Default is 16384 (8192 if running unpriviledged)
    # buffers-per-numa 128000

    ## Size of buffer data area
    ## Default is 2048
    # default data-size 2048
# }


dpdk {
    ## Use this to change default settings for all interfaces
    # dev default {
        ## Number of receive queues, enables RSS
        ## Default is 1
        # num-rx-queues 3

        ## Number of descriptors in transmit and receive rings
        ## increasing or reducing number can impact performance
        ## Default is 1024 for both rx and tx
        # num-rx-desc 512
        # num-tx-desc 512

        ## VLAN strip offload mode for interface
        ## Default is off
        # vlan-strip-offload on
    # }

    ## Whitelist a specific interface by specifying its PCI address
    dev 0000:04:00.0

    ## Blacklist specific device types by specifying PCI vendor:device
    ## NOTICE: Whitelist entries take precedence
    # TODO: check whether devices are blacklisted by default
    # blacklist 8086:10fb

    ## Change UIO driver used by VPP, Options are: igb_uio, vfio-pci,
    ## uio_pci_generic or auto (default)
    # uio-driver vfio-pci

    ## Custom device settings specification
    # dev 0000:02:00.1 {
        ## Set interface name
        # name eth0

        ## All the settings that can be specified in "dev default" options
        ## can be applied of course to specific devices

        ## NOTICE: I believe that specifying settings for a device whitelists
        ## it too
    # }

    ## Specify bonded interface and its slaves via PCI addresses
    ##
    ## Bonded interface in XOR load balance mode (mode 2) with L3 and L4 headers
    # vdev eth_bond0,mode=2,slave=0000:02:00.0,slave=0000:03:00.0,xmit_policy=l34
    # vdev eth_bond1,mode=2,slave=0000:02:00.1,slave=0000:03:00.1,xmit_policy=l34
    ##
    ## Bonded interface in Active-Back up mode (mode 1)
    # vdev eth_bond0,mode=1,slave=0000:02:00.0,slave=0000:03:00.0
    # vdev eth_bond1,mode=1,slave=0000:02:00.1,slave=0000:03:00.1

    ## Disable multi-segment buffers, improves performance but
    ## disables Jumbo MTU support
    # no-multi-seg

    ## Change hugepages allocation per-socket, needed only if there is need for
    ## larger number of mbufs. Default is 256M on each detected CPU socket
    # socket-mem 2048,2048

    ## Disables UDP / TCP TX checksum offload. Typically needed for use
    ## faster vector PMDs (together with no-multi-seg)
    # no-tx-checksum-offload
}
